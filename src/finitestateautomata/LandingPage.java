package finitestateautomata;

import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.Stack;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

public class LandingPage extends javax.swing.JFrame {

    private final static Logger logger = Logger.getLogger(LandingPage.class.getName());
    private Set<String> setOfStatesGlobal = new HashSet<>();
    private Set<String> setOfAlphabetsGlobal = new HashSet<>();
    private String initialState;
    private Set<String> setOfFinalStates = new HashSet<>();
    private Map<String, List<String>> transitions = new HashMap<>();
    private static final String DEFAULT_DEAD_STATE = "Z";
    private boolean nfaHasMultipleOptions = false;
    private ConversionEnum conversionDone;
    private String[][] globalTableData;
    private String[] globalTableHeader;

    public static void main(String[] args) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LandingPage().setVisible(true);
            }
        });
    }

    /**
     * Creates new form LandingPage
     */
    public LandingPage() {

        initComponents();

        initializeGroupMembersPhotos();

        String regularGrammarInput = inputRegularGrammar.getText();

        if (!regularGrammarInput.isEmpty() && !regularGrammarInput.isBlank()) {
            // get states
            setOfStatesGlobal = getStates(regularGrammarInput);
            String statesToString = setOfStatesGlobal.toString().replaceAll("\\[", "{").replaceAll("\\]", "}");
            txtStates.setText(statesToString);

            // get alphabets
            setOfAlphabetsGlobal = getAlphabets(regularGrammarInput);
            String alphabetsToString = setOfAlphabetsGlobal.toString().replaceAll("\\[", "{").replaceAll("\\]", "}");
            txtAlphabets.setText(alphabetsToString);
        }
        

    }

    private void initializeGroupMembersPhotos() {
        // set up the home section
        try {
            logger.log(Level.INFO, "Displaying the group members images");
            BufferedImage chow = ImageIO.read(new File("chow.jpeg"));
            ImageIcon chowIcon = new ImageIcon(chow);
            chowImage.setIcon(chowIcon);

            BufferedImage lim = ImageIO.read(new File("lim.jpeg"));
            ImageIcon limIcon = new ImageIcon(lim);
            limImage.setIcon(limIcon);

            BufferedImage lee = ImageIO.read(new File("lee.jpeg"));
            ImageIcon leeIcon = new ImageIcon(lee);
            leeImage.setIcon(leeIcon);

            BufferedImage yap = ImageIO.read(new File("yap.jpeg"));
            ImageIcon yapIcon = new ImageIcon(yap);
            yapImage.setIcon(yapIcon);

        } catch (IOException e) {
            logger.log(Level.SEVERE, e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel18 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel19 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        chowImage = new javax.swing.JLabel();
        leeImage = new javax.swing.JLabel();
        limImage = new javax.swing.JLabel();
        yapImage = new javax.swing.JLabel();
        javax.swing.JLabel jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        inputRegularGrammar = new javax.swing.JTextArea();
        btnImport = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        txtFilePath = new javax.swing.JTextField();
        labelImport = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        transitionTable = new javax.swing.JTable();
        javax.swing.JLabel jLabel29 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel30 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel31 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        txtStates = new javax.swing.JTextField();
        txtAlphabets = new javax.swing.JTextField();
        txtInitialState = new javax.swing.JTextField();
        txtFinalStates = new javax.swing.JTextField();
        javax.swing.JLabel jLabel34 = new javax.swing.JLabel();
        txtFormalDef = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel36 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        btnRG_NFA = new javax.swing.JButton();
        btnEpsilonFreeNFA = new javax.swing.JButton();
        btnNFA_to_DFA = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtTestString = new javax.swing.JTextArea();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel27 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        btnEpsilon = new javax.swing.JButton();
        btnTransitions = new javax.swing.JButton();
        btnAlphabet = new javax.swing.JButton();
        btnTheta = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 51, 51));

        jLabel1.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("TIC2151 Theory of Computation");

        jLabel2.setFont(new java.awt.Font("Monospaced", 3, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Tut. no.");

        jLabel3.setFont(new java.awt.Font("Monospaced", 3, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Group no.");

        jLabel4.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Group information:");

        jLabel5.setFont(new java.awt.Font("Monospaced", 2, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Name:");

        jLabel6.setFont(new java.awt.Font("Monospaced", 2, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Id:");

        jLabel7.setFont(new java.awt.Font("Monospaced", 2, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Participation:");

        jLabel8.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Chow Yi Ying");

        jLabel9.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("1191100981");

        jLabel10.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("30%");

        jLabel11.setFont(new java.awt.Font("Monospaced", 2, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Name:");

        jLabel12.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Lim Ying Fei");

        jLabel13.setFont(new java.awt.Font("Monospaced", 2, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Id:");

        jLabel14.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("1181102329");

        jLabel15.setFont(new java.awt.Font("Monospaced", 2, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Participation:");

        jLabel16.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("40%");

        jLabel17.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Lee Khai Wen");

        jLabel18.setFont(new java.awt.Font("Monospaced", 2, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Name:");

        jLabel19.setFont(new java.awt.Font("Monospaced", 2, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Participation:");

        jLabel20.setFont(new java.awt.Font("Monospaced", 2, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Id:");

        jLabel21.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("1181102329");

        jLabel22.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("10%");

        chowImage.setMaximumSize(new java.awt.Dimension(165, 165));
        chowImage.setMinimumSize(new java.awt.Dimension(165, 165));
        chowImage.setPreferredSize(new java.awt.Dimension(165, 165));

        leeImage.setMaximumSize(new java.awt.Dimension(165, 165));
        leeImage.setMinimumSize(new java.awt.Dimension(165, 165));
        leeImage.setPreferredSize(new java.awt.Dimension(165, 165));

        limImage.setMaximumSize(new java.awt.Dimension(165, 165));
        limImage.setMinimumSize(new java.awt.Dimension(165, 165));
        limImage.setPreferredSize(new java.awt.Dimension(165, 165));

        yapImage.setMaximumSize(new java.awt.Dimension(165, 165));
        yapImage.setMinimumSize(new java.awt.Dimension(165, 165));
        yapImage.setPreferredSize(new java.awt.Dimension(165, 165));

        jLabel41.setFont(new java.awt.Font("Monospaced", 2, 14)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(255, 255, 255));
        jLabel41.setText("Name:");

        jLabel42.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel42.setForeground(new java.awt.Color(255, 255, 255));
        jLabel42.setText("Yap Han Yang");

        jLabel43.setFont(new java.awt.Font("Monospaced", 2, 14)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(255, 255, 255));
        jLabel43.setText("Id:");

        jLabel44.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel44.setForeground(new java.awt.Color(255, 255, 255));
        jLabel44.setText("1181102575");

        jLabel45.setFont(new java.awt.Font("Monospaced", 2, 14)); // NOI18N
        jLabel45.setForeground(new java.awt.Color(255, 255, 255));
        jLabel45.setText("Participation:");

        jLabel46.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel46.setForeground(new java.awt.Color(255, 255, 255));
        jLabel46.setText("20%");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(335, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 938, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 938, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 938, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(614, 614, 614))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(chowImage, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(jLabel11)
                            .addComponent(jLabel13)
                            .addComponent(jLabel15)
                            .addComponent(jLabel12)
                            .addComponent(jLabel14)
                            .addComponent(limImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(86, 86, 86)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jLabel20)
                            .addComponent(jLabel19)
                            .addComponent(jLabel17)
                            .addComponent(jLabel21)
                            .addComponent(jLabel22)
                            .addComponent(leeImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel41)
                            .addComponent(jLabel43)
                            .addComponent(jLabel45)
                            .addComponent(jLabel42)
                            .addComponent(jLabel44)
                            .addComponent(jLabel46)
                            .addComponent(yapImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(127, 127, 127))))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {chowImage, leeImage, limImage, yapImage});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(52, 52, 52)
                .addComponent(jLabel4)
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(limImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(yapImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(leeImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(51, 51, 51)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel17)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel21)
                                .addGap(22, 22, 22)
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel22))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel41)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel42)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel43)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel44)
                                .addGap(22, 22, 22)
                                .addComponent(jLabel45)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel46))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(chowImage, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)
                                .addGap(22, 22, 22)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14)
                                .addGap(22, 22, 22)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16)))))
                .addGap(0, 189, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {chowImage, leeImage, limImage, yapImage});

        jTabbedPane1.addTab("Home", jPanel1);

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jPanel5.setBackground(new java.awt.Color(0, 51, 51));
        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        inputRegularGrammar.setColumns(20);
        inputRegularGrammar.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        inputRegularGrammar.setRows(5);
        inputRegularGrammar.setText("S -> aA | bB | ɛ\nA -> aA | a | ɛ\nB -> bB | b | ɛ\n");
        jScrollPane2.setViewportView(inputRegularGrammar);

        btnImport.setBackground(new java.awt.Color(213, 137, 54));
        btnImport.setFont(new java.awt.Font("Liberation Sans", 3, 15)); // NOI18N
        btnImport.setForeground(new java.awt.Color(255, 255, 255));
        btnImport.setText("Import");
        btnImport.setFocusable(false);
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(213, 137, 54));
        btnClear.setFont(new java.awt.Font("Liberation Sans", 3, 15)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Clear");
        btnClear.setFocusable(false);
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Liberation Sans", 3, 18)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setText("δ - Transitions  / RG - Regular Grammar (input)");

        txtFilePath.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        txtFilePath.setForeground(new java.awt.Color(0, 0, 0));

        labelImport.setFont(new java.awt.Font("Liberation Sans", 3, 15)); // NOI18N
        labelImport.setForeground(new java.awt.Color(255, 255, 255));
        labelImport.setText("Enter absolute file path below to import:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(btnImport, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtFilePath)
                    .addComponent(labelImport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(34, 34, 34))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel26)
                .addGap(42, 42, 42)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(labelImport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImport, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnClear, btnImport});

        jPanel6.setBackground(new java.awt.Color(0, 51, 51));
        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        transitionTable.setBackground(new java.awt.Color(255, 255, 255));
        transitionTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        transitionTable.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        transitionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"A", "{C}", "{B}", null}
            },
            new String [] {
                "NFA", "0", "1", "ɛ"
            }
        ));
        transitionTable.setGridColor(new java.awt.Color(213, 137, 54));
        transitionTable.setRowHeight(40);
        jScrollPane3.setViewportView(transitionTable);

        jLabel29.setFont(new java.awt.Font("Ubuntu Mono", 3, 15)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setText("States (Q)");

        jLabel30.setFont(new java.awt.Font("Ubuntu Mono", 3, 15)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 255, 255));
        jLabel30.setText("Alphabets (E)");

        jLabel31.setFont(new java.awt.Font("Ubuntu Mono", 3, 15)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(255, 255, 255));
        jLabel31.setText("Init State (q)");

        jLabel32.setFont(new java.awt.Font("Ubuntu Mono", 3, 15)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(255, 255, 255));
        jLabel32.setText("Final States (F)");

        jLabel33.setFont(new java.awt.Font("Ubuntu Mono", 3, 15)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(255, 255, 255));
        jLabel33.setText("Transition Table:");

        txtStates.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N

        txtAlphabets.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        txtAlphabets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAlphabetsActionPerformed(evt);
            }
        });

        txtInitialState.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        txtInitialState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInitialStateActionPerformed(evt);
            }
        });

        txtFinalStates.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        txtFinalStates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFinalStatesActionPerformed(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("Ubuntu Mono", 3, 15)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(255, 255, 255));
        jLabel34.setText("Formal Definition. (M)");

        txtFormalDef.setEditable(false);
        txtFormalDef.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        txtFormalDef.setText("{Q,∑, δ, q0,F}");
        txtFormalDef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFormalDefActionPerformed(evt);
            }
        });

        jLabel35.setForeground(new java.awt.Color(255, 255, 255));
        jLabel35.setText("Converted From:");

        jLabel36.setFont(new java.awt.Font("Ubuntu Mono", 3, 15)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(255, 255, 255));
        jLabel36.setText("RG");

        jLabel37.setFont(new java.awt.Font("Ubuntu Mono", 3, 15)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(255, 255, 255));
        jLabel37.setText("NFA");

        jLabel38.setForeground(new java.awt.Color(255, 255, 255));
        jLabel38.setText(">>");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 796, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 933, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                            .addComponent(jLabel30)
                            .addGap(101, 101, 101)
                            .addComponent(txtAlphabets))
                        .addComponent(jLabel33, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel29)
                                .addComponent(jLabel34)
                                .addComponent(jLabel35))
                            .addGap(29, 29, 29)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel6Layout.createSequentialGroup()
                                    .addComponent(jLabel36)
                                    .addGap(97, 97, 97)
                                    .addComponent(jLabel38)
                                    .addGap(70, 70, 70)
                                    .addComponent(jLabel37))
                                .addComponent(txtFormalDef, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                                .addComponent(txtStates)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel31)
                                .addComponent(jLabel32))
                            .addGap(77, 77, 77)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtInitialState)
                                .addComponent(txtFinalStates)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(jLabel36)
                    .addComponent(jLabel37)
                    .addComponent(jLabel38))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(txtFormalDef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(txtStates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(txtAlphabets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(txtInitialState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel32)
                    .addComponent(txtFinalStates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(jLabel33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100))
        );

        btnRG_NFA.setBackground(new java.awt.Color(255, 255, 255));
        btnRG_NFA.setForeground(new java.awt.Color(102, 0, 0));
        btnRG_NFA.setText("ɛ-NFA");
        btnRG_NFA.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 0, 0)));
        btnRG_NFA.setFocusable(false);
        btnRG_NFA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRG_NFAActionPerformed(evt);
            }
        });

        btnEpsilonFreeNFA.setBackground(new java.awt.Color(255, 255, 255));
        btnEpsilonFreeNFA.setForeground(new java.awt.Color(102, 0, 0));
        btnEpsilonFreeNFA.setText("NFA");
        btnEpsilonFreeNFA.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 0, 0)));
        btnEpsilonFreeNFA.setFocusable(false);
        btnEpsilonFreeNFA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEpsilonFreeNFAActionPerformed(evt);
            }
        });

        btnNFA_to_DFA.setBackground(new java.awt.Color(255, 255, 255));
        btnNFA_to_DFA.setForeground(new java.awt.Color(102, 0, 0));
        btnNFA_to_DFA.setText("DFA");
        btnNFA_to_DFA.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 0, 0)));
        btnNFA_to_DFA.setFocusable(false);
        btnNFA_to_DFA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNFA_to_DFAActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(255, 255, 255));
        jButton6.setForeground(new java.awt.Color(102, 0, 0));
        jButton6.setText("Min DFA");
        jButton6.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 0, 0)));
        jButton6.setFocusable(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        txtTestString.setColumns(20);
        txtTestString.setFont(new java.awt.Font("Liberation Mono", 1, 18)); // NOI18N
        txtTestString.setForeground(new java.awt.Color(0, 0, 0));
        txtTestString.setRows(5);
        txtTestString.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 51, 51)));
        jScrollPane4.setViewportView(txtTestString);

        jLabel27.setFont(new java.awt.Font("Monospaced", 3, 18)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(0, 0, 0));
        jLabel27.setText("Check string (input)");

        jButton8.setBackground(new java.awt.Color(204, 102, 0));
        jButton8.setFont(new java.awt.Font("Liberation Sans", 3, 18)); // NOI18N
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setText("Test");
        jButton8.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 0, 0)));
        jButton8.setFocusable(false);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("Monospaced", 3, 18)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(0, 0, 0));
        jLabel28.setText("Actions");

        jLabel39.setForeground(new java.awt.Color(204, 0, 51));
        jLabel39.setText("Error Message gose here");
        jLabel39.setEnabled(false);

        jLabel40.setFont(new java.awt.Font("Monospaced", 3, 14)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(0, 0, 0));
        jLabel40.setText("Click to copy symbols to clipboard:");

        btnEpsilon.setBackground(new java.awt.Color(255, 255, 255));
        btnEpsilon.setForeground(new java.awt.Color(102, 0, 0));
        btnEpsilon.setText("ɛ");
        btnEpsilon.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 0, 0)));
        btnEpsilon.setFocusable(false);
        btnEpsilon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEpsilonActionPerformed(evt);
            }
        });

        btnTransitions.setBackground(new java.awt.Color(255, 255, 255));
        btnTransitions.setForeground(new java.awt.Color(102, 0, 0));
        btnTransitions.setText("δ");
        btnTransitions.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 0, 0)));
        btnTransitions.setFocusable(false);
        btnTransitions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransitionsActionPerformed(evt);
            }
        });

        btnAlphabet.setBackground(new java.awt.Color(255, 255, 255));
        btnAlphabet.setForeground(new java.awt.Color(102, 0, 0));
        btnAlphabet.setText("∑");
        btnAlphabet.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 0, 0)));
        btnAlphabet.setFocusable(false);
        btnAlphabet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlphabetActionPerformed(evt);
            }
        });

        btnTheta.setBackground(new java.awt.Color(255, 255, 255));
        btnTheta.setForeground(new java.awt.Color(102, 0, 0));
        btnTheta.setText("θ");
        btnTheta.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 0, 0)));
        btnTheta.setFocusable(false);
        btnTheta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThetaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRG_NFA, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnNFA_to_DFA, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnEpsilonFreeNFA, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(53, 53, 53))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel28)
                            .addComponent(jLabel39)
                            .addComponent(jLabel40)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnEpsilon, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnTransitions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(btnAlphabet, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnTheta, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel27)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane4)
                                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)))
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 835, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(97, 97, 97))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAlphabet, btnEpsilon, btnTransitions});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel39)
                            .addGap(37, 37, 37)
                            .addComponent(jLabel28)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(btnEpsilonFreeNFA, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(btnRG_NFA, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnNFA_to_DFA, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(61, 61, 61)
                            .addComponent(jLabel40)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnEpsilon, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnTransitions, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnAlphabet, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnTheta, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(104, 104, 104)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel27)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 802, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(188, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAlphabet, btnEpsilon, btnTransitions});

        jTabbedPane1.addTab("RG -> FA", jPanel2);

        jPanel3.setBackground(new java.awt.Color(102, 0, 0));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel23.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(102, 0, 0));
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("How can we help you?");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 0, 0)));
        jScrollPane1.setViewportView(jTextArea1);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Conversion of GR to FA", "Conversion of NFA to DFA", "Conversion of e-NFA to NFA ", "User Experience", "General System Error" }));
        jComboBox1.setSelectedIndex(4);

        jLabel24.setFont(new java.awt.Font("Liberation Sans", 3, 15)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(102, 0, 0));
        jLabel24.setText("Choose Category");

        jLabel25.setFont(new java.awt.Font("Liberation Sans", 3, 15)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(102, 0, 0));
        jLabel25.setText("Enter message below");

        jButton1.setBackground(new java.awt.Color(102, 0, 0));
        jButton1.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Submit");

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(102, 0, 0));
        jButton2.setText("Clear");
        jButton2.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 0, 0)));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(130, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(203, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(496, 496, 496)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(591, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(222, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Help", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtAlphabetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAlphabetsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAlphabetsActionPerformed

    private void txtInitialStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInitialStateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInitialStateActionPerformed

    private void txtFinalStatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFinalStatesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFinalStatesActionPerformed

    private void txtFormalDefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFormalDefActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFormalDefActionPerformed

    private void btnEpsilonFreeNFAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEpsilonFreeNFAActionPerformed
        logger.log(Level.INFO, "Converting RG to Epsilon free NFA");
        String regularGrammar = inputRegularGrammar.getText();
        initialState = regularGrammar.substring(0, regularGrammar.indexOf("->")).replaceAll("\\s+", "");
        setOfStatesGlobal = getStates(regularGrammar);
        setOfAlphabetsGlobal = getAlphabets(regularGrammar);

        transitions = convertEpsilonRegularGrammarToEpsilonFreeRG(regularGrammar);

        System.out.println(transitions.toString());
        logger.log(Level.INFO, "Successfully Converted RG to Epsilon free NFA");

        // set final states
        setOfFinalStates.clear(); // clear first before setting
        transitions.forEach((key, values) -> {
            values.forEach(value -> {
                if (setOfAlphabetsGlobal.contains(value)) {
                    setOfFinalStates.add(key);
                }
            });
        });

        // set states
        String statesToString = setOfStatesGlobal.toString().replaceAll("\\[", "{").replaceAll("\\]", "}");
        txtStates.setText(statesToString);

        // set alphabets
        setOfAlphabetsGlobal.remove(btnEpsilon.getText());
        String alphabetsToString = setOfAlphabetsGlobal.toString().replaceAll("\\[", "{").replaceAll("\\]", "}");
        txtAlphabets.setText(alphabetsToString);

        // TODO
        System.out.println(btnTransitions.getText() + " : " + transitions.toString());

        // set initial state
        txtInitialState.setText(initialState);

        // set finalStates
        String finalStatesToString = setOfFinalStates.toString().replaceAll("\\[", "{").replaceAll("\\]", "}");
        txtFinalStates.setText(finalStatesToString);

        // create transition table
        String[] header = getTransitionTableHeader();
        String[][] tableData = getTransitionTableData(header, transitions);
        addThetaToEmptyTransitionsInNFA(tableData);
        setDataToTransitionTable(tableData, header);

        // update the regular grammar input
        System.out.println(transitions.toString());
        inputRegularGrammar.setText(convertTransitionMapToTransitionString(transitions));

        globalTableData = tableData;
        globalTableHeader = header;
        conversionDone = ConversionEnum.NFA;


    }//GEN-LAST:event_btnEpsilonFreeNFAActionPerformed

    private String convertTransitionMapToTransitionString(Map<String, List<String>> transitionMap) {
        StringBuilder response = new StringBuilder();
        transitionMap.forEach((key, values) -> {
            response.append(key).append(" -> ").append(constructRightHandSideOfTransitions(values)).append("\n");
        });
        return response.toString();
    }

    private String constructRightHandSideOfTransitions(List<String> values) {

        StringBuilder response = new StringBuilder();

        final String[] transitionTokens = values.toArray(String[]::new);

        for (int x = 0; x < transitionTokens.length; x++) {
            if (x != (transitionTokens.length - 1)) { // if is not the last index
                response.append(transitionTokens[x]).append(" | ");
            } else {
                response.append(transitionTokens[x]);
            }
        }
        return response.toString();
    }

    private void btnNFA_to_DFAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNFA_to_DFAActionPerformed

        String regularGrammar = inputRegularGrammar.getText();
        transitions = createMapOfTransitions(regularGrammar);

        // initial state
        initialState = txtInitialState.getText();

        // set of states
        setOfStatesGlobal = Arrays.stream(txtStates.getText()
                .replaceAll("\\s+", "") // remove white spaces
                .replaceAll("\\{", "") // remove opening braces
                .replaceAll("\\}", "") // remove closisng braces
                .split(",")) // get the states as an array
                .collect(Collectors.toSet()); // convert to set

        // set final states
        setOfFinalStates = Arrays.stream(txtFinalStates.getText()
                .replaceAll("\\s+", "") // remove white spaces
                .replaceAll("\\{", "") // remove opening braces
                .replaceAll("\\}", "") // remove closisng braces
                .split(",")) // get the states as an array
                .collect(Collectors.toSet()); // convert to set

        // set of alphabets
        setOfAlphabetsGlobal = Arrays.stream(txtAlphabets.getText()
                .replaceAll("\\s+", "") // remove white spaces
                .replaceAll("\\{", "") // remove opening braces
                .replaceAll("\\}", "") // remove closisng braces
                .split(",")) // get the states as an array
                .collect(Collectors.toSet()); // convert to set

        System.out.println("****states: " + setOfStatesGlobal.toString());
        System.out.println("****Alphabets:" + setOfAlphabetsGlobal.toString());
        System.out.println("****Final States:" + setOfFinalStates.toString());
        System.out.println("****Initial State: " + initialState);
        System.out.println("****" + transitions.toString());

        String[] header = getTransitionTableHeader();
        String[][] tableData = getTransitionTableData(header, transitions);
        String[][] newTableData = null;

//        tableData = addDeadState(tableData);
        if (!nfaHasMultipleOptions) {
            System.out.println("Adding dead state");
            tableData = addDeadState(tableData);
            setDataToTransitionTable(tableData, header); // set data to table

            updateAllStatesAndFinalStates(tableData);

            // convert table data to transition
            transitions = convertTableDataToTranstionMap(tableData, header);
            String dfaTransitions = convertTransitionMapToTransitionString(transitions);
            inputRegularGrammar.setText(dfaTransitions);

            globalTableData = tableData;
            globalTableHeader = header;
            conversionDone = ConversionEnum.DFA;

        } else {
            System.out.println("Handling transitions alphabets that can have multiple options");
            // create stack of states to traverse
            Stack<String> pendingStates = new Stack<>();
            List<String> statesHandled = new ArrayList<>();

            newTableData = new String[1][tableData[0].length]; // insert one transition record at a time
            String[] firstTransitionFromInitialState = getFirstTransitonRecord(header, tableData);

            for (int x = 0; x < header.length; x++) {
                String data = firstTransitionFromInitialState[x].replaceAll("\\s+", "");

                if (x > 0 && data != null && data.contains(",")) {
                    //create new state and store in stack
                    data = data.replaceAll(",", "").replaceAll("\\s+", "");
                }
                if (data != null && !pendingStates.contains(data) && !data.equalsIgnoreCase(initialState)) {
                    pendingStates.push(data.replaceAll("\\s+", ""));
                }
                newTableData[0][x] = data;
            }
            System.out.println("Current pending state: " + pendingStates.toString());
            System.out.println("Constructed the first line: " + Arrays.toString(newTableData[0]));
            // we have handled the initial state
            statesHandled.add(initialState);

            // handle next state
            while (!pendingStates.empty()) { // loop while there are still more states to be traversed
                String currentStateBeingProcessed = pendingStates.pop();
                if (setOfStatesGlobal.contains(currentStateBeingProcessed)) { // if current state initially existed
                    System.out.println("Handling existing state: " + currentStateBeingProcessed);
                    String[] newRecord = new String[tableData[0].length];
                    newRecord[0] = currentStateBeingProcessed; // insert the state
                    for (int x = 0; x < tableData.length; x++) { // loop through current table data
                        if (tableData[x][0].equals(currentStateBeingProcessed)) { // check the first column

                            String[] oldRecord = tableData[x];

                            for (int itemIdx = 1; itemIdx < oldRecord.length; itemIdx++) {
                                String columnData = oldRecord[itemIdx];

                                if (columnData != null) {
                                    columnData = columnData.replaceAll("\\s+", "");  // remove white spaces
                                }
                                String columnDataOld = oldRecord[itemIdx];
                                if (columnDataOld != null) {
                                    columnDataOld = columnDataOld.replaceAll("\\s+", ""); // remove whitespaces
                                }

                                columnData = columnDataOld != null && columnDataOld.contains(",") ? columnDataOld.replaceAll(",", "") : columnDataOld;

                                if (columnData == null) {
                                    System.out.println("Adding dead state");
                                    columnData = DEFAULT_DEAD_STATE;
                                }

                                newRecord[itemIdx] = columnData;

                                System.out.println("State: " + columnData + " :Already present? " + setOfStatesGlobal.contains(columnData));
                                if (!setOfStatesGlobal.contains(columnData)) { // if the current state is new
                                    if (!pendingStates.contains(columnData) && !statesHandled.contains(columnData)) { // if is not present in pending state set and not yet handled
                                        System.out.println("Pushing " + columnData + " into pending states: " + pendingStates.toString());
                                        pendingStates.push(columnData); // add it to the pending states
                                        System.out.println("Current pending states: " + pendingStates.toString());
                                    }
                                }
                            }

                            newTableData = insertNewRowToNewTableData(newTableData, newRecord); // add the new record
                        }
                    }
                    System.out.println("Adding " + currentStateBeingProcessed + " to handled states");
                    statesHandled.add(currentStateBeingProcessed); // add the currently processed state as done               
                    System.out.println("Currently handled states: " + statesHandled.toString());
                } else {
                    System.out.println(">>Handling new state : " + currentStateBeingProcessed);

                    // trace the members of the new state and get the 
                    String[] newRecord = new String[header.length];
                    newRecord[0] = currentStateBeingProcessed; // [ AD, ...] adding a new state

                    if (currentStateBeingProcessed != null && currentStateBeingProcessed.equalsIgnoreCase(DEFAULT_DEAD_STATE)) { // dead states return back to dead states
                        System.out.println("    Handling dead state");
                        for (int columnIndex = 1; columnIndex < header.length; columnIndex++) {
                            newRecord[columnIndex] = DEFAULT_DEAD_STATE; // write the new state
                        }
                        System.out.println("    Adding " + currentStateBeingProcessed + " to handled states");
                        statesHandled.add(currentStateBeingProcessed); // add the currently processed state as done
                        System.out.println("    Current pending states: " + pendingStates.toString());
                    } else {

                        for (int columnIndex = 1; columnIndex < header.length; columnIndex++) {
                            String[] constituentMembers = generateConstituentMembers(currentStateBeingProcessed);

                            System.out.println("Members: " + Arrays.toString(constituentMembers));

                            Set<String> unionOfMembers = generateUnionOfMembers(tableData, constituentMembers, columnIndex);

                            StringBuilder currentlyUpdatedTransitionState = new StringBuilder();
                            unionOfMembers.forEach(currentlyUpdatedTransitionState::append);

                            String currentlyUpdatedTransitionStateToString = currentlyUpdatedTransitionState.toString();
                            currentlyUpdatedTransitionStateToString = currentlyUpdatedTransitionStateToString.replaceAll("\\s+", "");
                            System.out.println("Adding state: " + currentlyUpdatedTransitionStateToString);

                            newRecord[columnIndex] = currentlyUpdatedTransitionState.toString(); // write the new state

                            if (!pendingStates.contains(currentlyUpdatedTransitionStateToString) && !statesHandled.contains(currentlyUpdatedTransitionStateToString)) {
                                pendingStates.push(currentlyUpdatedTransitionState.toString()); // add the new state to the pending states
                            }
                            statesHandled.add(currentStateBeingProcessed); // add the currently processed state as done
                        }
                    }

                    newTableData = insertNewRowToNewTableData(newTableData, newRecord); //write to the newTableData
                }
            }

            newTableData = cleanTableData(newTableData);

            for (String[] record : newTableData) {
                System.out.println("new rec: " + Arrays.toString(record));
            }
            System.out.println("Pending: " + pendingStates.toString());
            System.out.println("Handled: " + statesHandled.toString());
            setDataToTransitionTable(newTableData, header); // set data to table
            updateAllStatesAndFinalStates(newTableData);
            
            String transitionsString = convertTransitionMapToTransitionString(convertTableDataToTranstionMap(newTableData, header));
            inputRegularGrammar.setText(transitionsString);
            
            globalTableData = newTableData;
            globalTableHeader = header;
            conversionDone = ConversionEnum.DFA;
        }


    }//GEN-LAST:event_btnNFA_to_DFAActionPerformed

    private String[] getFirstTransitonRecord(String[] header, String[][] tableData) {
        System.out.println("Getting record for first transition: " + tableData.length);
        String[] firstTransitionFromInitialState = new String[header.length];
        for (String[] record : tableData) {
            if (record[0].equals(initialState)) {
                firstTransitionFromInitialState = record;
            }
        }
        return firstTransitionFromInitialState;
    }

    private Set<String> generateUnionOfMembers(String[][] tableData, String[] constituentMembers, int columnIndex) {
        Set<String> unionOfMembers = new HashSet<>();
        for (String[] record : tableData) { // for each record
            for (String member : constituentMembers) { // for each constituent member
                if (record[0].equalsIgnoreCase(member)) {
                    String states = record[columnIndex];

                    if (states != null && states.contains(",")) { // if state like A,B
                        Arrays.stream(states.split(",")).forEach(unionOfMembers::add);
                        System.out.println("Union of members" + unionOfMembers.toString());
                    } else if (states != null) { // if like A
                        unionOfMembers.add(states);
                    }
                }
            }
        }
        return unionOfMembers;
    }

    private String[] generateConstituentMembers(String currentStateBeingProcessed) {
        String[] constituentMembers;
        if (currentStateBeingProcessed != null && currentStateBeingProcessed.length() == 2) {
            constituentMembers = currentStateBeingProcessed.split("");
        } else {
            constituentMembers = new String[]{currentStateBeingProcessed};
        }
        return constituentMembers;
    }

    private void updateAllStatesAndFinalStates(String[][] newTableData) {
        // set final states
        Set<String> allStates = new HashSet<>(); // states after conversion
        for (String[] record : newTableData) {
            if (!allStates.contains(record[0]) && record[0] != null) {
                allStates.add(record[0]);
            }
        }
        txtStates.setText(allStates.toString()
                .replaceAll("\\[", "{") // remove opening braces
                .replaceAll("\\]", "}")); // remove closisng braces);

        // final states
        Set<String> currentFinalStates = new HashSet<>();
        allStates.forEach(state -> {
            setOfFinalStates.forEach(finalState -> {
                if (state.contains(finalState)) {
                    if (!currentFinalStates.contains(state)) {
                        currentFinalStates.add(state);
                    }
                }
            });
        });
        txtFinalStates.setText(currentFinalStates.toString()
                .replaceAll("\\[", "{") // remove opening braces
                .replaceAll("\\]", "}")); // remove closisng braces);
    }

    private String[][] insertNewRowToNewTableData(String[][] newTableData, String[] newRecord) {
        System.out.println("    Adding record to new table data: " + Arrays.toString(newRecord));
        String[][] newTableDataResponse = new String[newTableData.length + 1][newTableData[0].length];

        // copy the old columnData
        for (int rowIdx = 0; rowIdx < newTableData.length; rowIdx++) {
            for (int colIdx = 0; colIdx < newTableData[0].length; colIdx++) {
                newTableDataResponse[rowIdx][colIdx] = newTableData[rowIdx][colIdx];
            }
        }

        newTableDataResponse[newTableDataResponse.length - 1] = newRecord;
        System.out.println("Size incread from " + newTableData.length + " to " + newTableDataResponse.length);
        return newTableDataResponse;
    }

    private String[][] addDeadState(String[][] tableData) {
        // check if there are empty transitions and introduce a dead state
        String[][] newTableData = new String[tableData.length + 1][tableData[0].length];

        for (int x = 0; x < tableData.length; x++) {
            for (int y = 0; y < tableData[0].length; y++) {
                if (tableData[x][y] == null || tableData[x][y].isEmpty() || tableData[x][y].isBlank()) {
                    tableData[x][y] = DEFAULT_DEAD_STATE;
                }
            }
        }

        // copy columnData
        for (int x = 0; x < tableData.length; x++) {
            for (int y = 0; y < tableData[0].length; y++) {

                newTableData[x][y] = tableData[x][y];
            }
        }

        // set tranisitions for the dead state
        for (int x = 0; x < newTableData[0].length; x++) {
            newTableData[newTableData.length - 1][x] = DEFAULT_DEAD_STATE;
        }

        return newTableData;
    }

    private void setDataToTransitionTable(String[][] tableData, String[] header) {
        DefaultTableModel model = new DefaultTableModel(tableData, header);
        transitionTable.setModel(model);
    }

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        
//        txtTestString.setText("");
        String[] entries = txtTestString.getText().split("\n"); // the strings

        Map<String, List<String>> transitionFromTableData = convertTableDataToTranstionMap(globalTableData, globalTableHeader);
        Map<String, String> outcome = new HashMap<>(); // eg {1001: true}

        for (int i = 0; i < entries.length; i++) { // one entry at a time
            final String[] alphabetsToCheck = entries[i] // eg 10010
                    .replaceAll("\\s+", "") // remove spaces
                    .split(""); // eg [1,0,0,1,0]
            Boolean allMatch = checkIfAlphabetsAreValid(alphabetsToCheck);

            if (allMatch) {
                boolean accepted = true;
                final String[] currentState = new String[]{txtInitialState.getText()}; // we start with the initial state
                System.out.println("Current state: " + currentState[0]);

                for (int j = 0; j < alphabetsToCheck.length; j++) { // loop each alphabet like 1 then 0 then 0 then 1 etc
                    
                    final String currentAlphabet = alphabetsToCheck[j]; // eg 1
                    System.out.println("=================");
                    System.out.println("checking alphabet " + currentAlphabet);

                    final Boolean[] transitionFound = new Boolean[]{false};
                    
                    transitions.get(currentState[0]).forEach(item -> { // A = [aB, cC]
                        String itemWithoutSpace = item.replaceAll("\\s+", "");
                        System.out.println("        transition: " + itemWithoutSpace);
                        // move from current state
                        System.out.println("            Checking if [" + currentAlphabet + "] is part of  [" + itemWithoutSpace + "]");
                        if (itemWithoutSpace.contains(currentAlphabet)) { // eg alphabet a and transition is (aA or a) == this means it accepts this alphabet
                            System.out.println("                [" + currentAlphabet + "] matches [" +itemWithoutSpace + "]");
                            transitionFound[0] = true;
                            if (itemWithoutSpace.length() == 2) {
                                currentState[0] = item.replace(currentAlphabet, ""); // get the next state
                            }
                        } else {
                            System.out.println("                [" + currentAlphabet + "] do not match [" +itemWithoutSpace + "]");
                        }
                    });

                    if (!transitionFound[0]) { // if not transition then it fails
                        accepted = false;
                    }

                    if (j == alphabetsToCheck.length - 1 && accepted && setOfFinalStates.contains(currentState[0])) { // if the current state accepts the alphabet, is the final state and the string is completed
                        outcome.put(entries[i], "Accepted");
                    } else if (j == alphabetsToCheck.length - 1 && !accepted) {
                        outcome.put(entries[i], "Rejected");
                    } else if (alphabetsToCheck.length == 1 && setOfFinalStates.contains(currentState[0])) {
                        outcome.put(entries[i], "Accepted");
                    } else if (alphabetsToCheck.length == 1 && !setOfFinalStates.contains(currentState[0])) {
                        outcome.put(entries[i], "Rejected");
                    }
                    
                    System.out.println("=====================");
                }
                
                System.out.println("            Current matches: " + outcome.toString()); // check current matches

            } else {
                outcome.put(entries[i], "Rejected");
            }

        }

        txtTestString.setText(outcome.toString()
                .replaceAll("\\s+", "") // remove white spaces
                .replaceAll(",", "\n") // show them as list
                .replaceAll("\\}", "") // remove the braces
                .replaceAll("\\{", "")); // remove the braces

    }//GEN-LAST:event_jButton8ActionPerformed

    private Boolean checkIfAlphabetsAreValid(final String[] alphabetsToCheck) {
        System.out.println("Checking if alphabets are valid");
        // check if alphates are valid
        Boolean allMatch = Arrays.stream(alphabetsToCheck)
                .collect(Collectors.toSet()) // eg from [1,0,0,1,0,0] to [1,0]
                .stream().allMatch(setOfAlphabetsGlobal::contains); // check if the given alphabets all exists in the set of alphabets
        System.out.println("Are alphabets valid : " + allMatch);
        return allMatch;
    }

    private Map<String, List<String>> convertTableDataToTranstionMap(String[][] tableDataToBeConverted, String[] tableHeader) {
        Map<String, List<String>> response = new HashMap<>();

        for (int rowId = 0; rowId < tableDataToBeConverted.length; rowId++) {
            List<String> value = new ArrayList<>();
            String key = null;
            for (int columnId = 0; columnId < tableDataToBeConverted[rowId].length; columnId++) {
                if (columnId == 0) {
                    key = tableDataToBeConverted[rowId][columnId];
                } else {
                    if (tableHeader != null) {
                        value
                                .add(tableHeader[columnId]
                                        + tableDataToBeConverted[rowId][columnId]);
                    }
                }
            }
            response.put(key, value);
        }

        return response;
    }


    private void btnEpsilonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEpsilonActionPerformed
        String epsilon = btnEpsilon.getText();
        setClipboardContent(epsilon);
    }//GEN-LAST:event_btnEpsilonActionPerformed

    private void setClipboardContent(String epsilon) throws HeadlessException {
        StringSelection stringSelection = new StringSelection(epsilon);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
    }

    private void btnTransitionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransitionsActionPerformed
        String transtion = btnTransitions.getText();
        setClipboardContent(transtion);
    }//GEN-LAST:event_btnTransitionsActionPerformed

    private void btnAlphabetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlphabetActionPerformed
        String alphabet = btnAlphabet.getText();
        setClipboardContent(alphabet);
    }//GEN-LAST:event_btnAlphabetActionPerformed

    private void btnRG_NFAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRG_NFAActionPerformed
        // 1. construct an e-free regular grammar G' from G (see relevant section);
        txtStates.setText("");
        txtAlphabets.setText("");
        txtInitialState.setText("");
        txtFinalStates.setText("");

        String regularGrammar = inputRegularGrammar.getText();

        initialState = regularGrammar.substring(0, regularGrammar.indexOf("->")).replaceAll("\\s+", "");

        transitions = createMapOfTransitions(regularGrammar);

        setOfStatesGlobal = getStates(regularGrammar);
        setOfAlphabetsGlobal = getAlphabets(regularGrammar);

        // set final states
        setOfFinalStates.clear(); // clear first before setting
        transitions.forEach((key, values) -> {
            logger.log(Level.INFO, "Values {0}", new String[]{values.toString()});
            values.forEach(value -> {
                logger.log(Level.INFO, "Value {0}", new String[]{value});
                if (setOfAlphabetsGlobal.contains(value)) {
                    logger.log(Level.INFO, "present {0}", new Boolean[]{setOfAlphabetsGlobal.contains(value)});
                    setOfFinalStates.add(key);
                }
            });
        });

        String[] header = getTransitionTableHeader();
        String[][] tableData = getTransitionTableData(header, transitions);
        addThetaToEmptyTransitionsInNFA(tableData);

        setDataToTransitionTable(tableData, header);
        globalTableData = tableData;
        globalTableHeader = header;
//        conversionDone = ConversionEnum.E_NFA;

        // set states
        String statesToString = setOfStatesGlobal.toString().replaceAll("\\[", "{").replaceAll("\\]", "}");
        txtStates.setText(statesToString);

        // set alphabets
        String alphabetsToString = setOfAlphabetsGlobal.toString().replaceAll("\\[", "{").replaceAll("\\]", "}");
        txtAlphabets.setText(alphabetsToString);

        // TODO
        System.out.println(btnTransitions.getText() + " : " + transitions.toString());

        // set initial state
        txtInitialState.setText(initialState);

        // set finalStates
        String finalStatesToString = setOfFinalStates.toString().replaceAll("\\[", "{").replaceAll("\\]", "}");
        txtFinalStates.setText(finalStatesToString);


    }//GEN-LAST:event_btnRG_NFAActionPerformed

    private String[][] getTransitionTableData(String[] header, Map<String, List<String>> stateTransitions) {
        int size = stateTransitions.size();
        int[] count = {0};
        String[][] tableData = new String[size][header.length];
        stateTransitions.forEach((key, value) -> {
            tableData[count[0]][0] = key;
            value.forEach(val -> {
                for (int idx = 1; idx < header.length; idx++) {
                    if (val.length() == 2 && String.valueOf(val.charAt(0)).equalsIgnoreCase(header[idx])) {
                        if (tableData[count[0]][idx] != null && !tableData[count[0]][idx].isBlank() && !tableData[count[0]][idx].isEmpty()) {
                            nfaHasMultipleOptions = true;
                            tableData[count[0]][idx] += "," + val.charAt(1);
                        } else {
                            tableData[count[0]][idx] = "" + val.charAt(1);
                        }
                    } else if (val.length() == 1 && val.equalsIgnoreCase(header[idx])) {
                        if (tableData[count[0]][idx] != null && !tableData[count[0]][idx].isBlank() && !tableData[count[0]][idx].isEmpty() && !tableData[count[0]][idx].equalsIgnoreCase(key)) {
                            nfaHasMultipleOptions = true;
                            tableData[count[0]][idx] += "," + key;
                        } else {
                            tableData[count[0]][idx] = key;
                        }
                    }
                }
            });
            count[0] += 1;
        });
        return tableData;
    }

    private String[] getTransitionTableHeader() {
        // initialize transiton tables
        String[] header = new String[setOfAlphabetsGlobal.size() + 1];
        header[0] = "State \\ Alphabet";
        int[] i = {1};
        setOfAlphabetsGlobal.forEach(alp -> {
            header[i[0]] = alp;
            i[0] += 1;
        });
        return header;
    }

    private void addThetaToEmptyTransitionsInNFA(String[][] tableData) {
        for (int x = 0; x < tableData.length; x++) {
            for (int y = 0; y < tableData[x].length; y++) {
                if (tableData[x][y] == null || tableData[x][y].isEmpty() || tableData[x][y].isBlank()) {
                    tableData[x][y] = btnTheta.getText();
                }
            }
        }
    }

    private void btnThetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThetaActionPerformed
        String theta = btnTheta.getText();
        setClipboardContent(theta);
    }//GEN-LAST:event_btnThetaActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        inputRegularGrammar.setText("");
        txtStates.setText("");
        txtAlphabets.setText("");
        txtInitialState.setText("");
        txtFinalStates.setText("");
        txtTestString.setText("");
        DefaultTableModel model = (DefaultTableModel) transitionTable.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
             
        
        StringBuilder content = new StringBuilder();
        
        String filePath = txtFilePath.getText();
        File myObj = new File(filePath);
        
        try (Scanner myReader = new Scanner(myObj)) {
            while (myReader.hasNextLine()) {
                content.append(myReader.nextLine()).append("\n");
            }
            System.out.println("Data: " + myReader.toString());
        } catch (FileNotFoundException e) {
            logger.severe("File not found exception");
        } catch (Exception e) {
            logger.log(Level.SEVERE, "An error occurred reading data from {0} \n\n {1}", new String[]{filePath, e.getMessage()});
        }
        
        if (content.length() == 0) {
            logger.log(Level.WARNING, "The file {0} seems empty", new String[]{filePath});
        }
        
        
        inputRegularGrammar.setText(content.toString());
    }//GEN-LAST:event_btnImportActionPerformed

    // util methods
    private Map<String, List<String>> convertEpsilonRegularGrammarToEpsilonFreeRG(String regularGrammar) {
        logger.log(Level.INFO, "Converting Epsilon Regular Grammar to Epsilon Free Regular Grammar");
        Map<String, List<String>> response = createMapOfTransitions(regularGrammar);

        // 1. extracting states that accepts epsilon
        Set<String> statesAcceptingEpsilon = new HashSet<>();
        logger.log(Level.INFO, "extracting states that accepts epsilon");
        response.forEach((key, value) -> {
            if (value.contains(btnEpsilon.getText())) {
                statesAcceptingEpsilon.add(key);
            }
        });

        // 2. remove all transition that accept epsilon
        logger.log(Level.INFO, "Removing all transition that accept epsilon");
        response.forEach((key, value) -> {
            final String epsilon = btnEpsilon.getText();
            if (value.contains(epsilon)) {
                value.remove(epsilon); // remove epsilon
                response.put(key, value);
            }
        });

        // 3. substitute N -> e
        boolean doesInitialStateAcceptEpsilon = statesAcceptingEpsilon.contains(initialState);
        if (doesInitialStateAcceptEpsilon) {
            statesAcceptingEpsilon.remove(initialState.replaceAll("\\s+", ""));
        }

        statesAcceptingEpsilon.forEach(state -> { // A -> epsilon
            logger.log(Level.INFO, "substitute N -> e for {0}", new String[]{state});
            response.forEach((key, value) -> { // S -> [ aA ]

                List<String> currentValue = new ArrayList<>(value);// initialize. uses this to avoid concurrent modification exception

                value.stream().forEach(item -> { // aA
                    if (item.contains(state) && (item.replaceAll("\\s+", "").length() == 2)) { // check if an item in value should be subtituted
                        logger.log(Level.INFO, "Adding: {0}. Found match at value {1}", new String[]{item, item});
                        currentValue.add(String.valueOf(item.charAt(0))); // substitute
                    }
                }); // end of looping values                
                response.put(key, currentValue.stream().collect(Collectors.toSet()).stream().collect(Collectors.toList()));
            });
        }); // all states traversed

        // change the initial state by introducing a state
//        if (doesInitialStateAcceptEpsilon) {
//            List<String> value = response.get(initialState.replaceAll("\\s+", "")).stream()
//                    .collect(Collectors.toList()); // this makes sure you do not get reference but the values
//            value.add(btnEpsilon.getText());
//            response.put("X", value);
//            initialState = "X";
//            setOfStatesGlobal.add(initialState); // add the current state
//        }
        transitions = response;
        return response;
    }

    private Map<String, List<String>> createMapOfTransitions(String regularGrammar) {
        logger.log(Level.INFO, "Converting transition to a map");
        Map<String, List<String>> response = new ConcurrentHashMap<>();
        Arrays.stream(regularGrammar.split("\n"))
                .forEach(transition -> {

                    String[] transitionTokens = transition.split("->");

                    // get key (state)
                    final String key = transitionTokens[0]
                            .replaceAll("\\s+", "");

                    // get transition
                    final List<String> value;
                    value = Arrays.stream(transitionTokens[1]
                            .replaceAll("\\s+", "")
                            .split("\\|"))
                            .collect(Collectors.toList());

                    // add to map
                    response.put(key, value);
                });
        return response;
    }

    private Set<String> getStates(String input) {
        logger.log(Level.INFO, "Extracting a set of states");
        return Arrays.stream(input.split("\n"))
                .map(transition -> transition.split("->")[0].replaceAll("\\s+", ""))
                .collect(Collectors.toSet());
    }

    private Set<String> getAlphabets(String input) {
        logger.log(Level.INFO, "Extracting a set of alphabets");

        Set<String> states = getStates(input);

        List<String> alphabetRightHandSidesTokens = new ArrayList<>();
        Arrays.stream(input.split("\n"))
                .map(transition -> transition.split("->")[1])
                .forEach(line -> {
                    if (line.contains("|")) {
                        Arrays.stream(line.split("\\|")).forEach(alphabetRightHandSidesTokens::add);
                    } else {
                        alphabetRightHandSidesTokens.add(line);
                    }
                });

        return alphabetRightHandSidesTokens.stream()
                .map(token -> token.replaceAll("\\s+", "").length() == 2 ? String.valueOf(token.replaceAll("\\s+", "").charAt(0)) : token.replaceAll("\\s+", ""))
                .collect(Collectors.toSet())
                .stream()
                .filter(item -> !states.contains(item)) // remove the state symbols
                .collect(Collectors.toSet());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlphabet;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnEpsilon;
    private javax.swing.JButton btnEpsilonFreeNFA;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnNFA_to_DFA;
    private javax.swing.JButton btnRG_NFA;
    private javax.swing.JButton btnTheta;
    private javax.swing.JButton btnTransitions;
    private javax.swing.JLabel chowImage;
    private javax.swing.JTextArea inputRegularGrammar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel labelImport;
    private javax.swing.JLabel leeImage;
    private javax.swing.JLabel limImage;
    private javax.swing.JTable transitionTable;
    private javax.swing.JTextField txtAlphabets;
    private javax.swing.JTextField txtFilePath;
    private javax.swing.JTextField txtFinalStates;
    private javax.swing.JTextField txtFormalDef;
    private javax.swing.JTextField txtInitialState;
    private javax.swing.JTextField txtStates;
    private javax.swing.JTextArea txtTestString;
    private javax.swing.JLabel yapImage;
    // End of variables declaration//GEN-END:variables

    private String[][] cleanTableData(String[][] newTableData) {
        String[][] cleanData = new String[newTableData.length][newTableData[0].length];
        for (int rowId = 0; rowId < newTableData.length; rowId++) {
            for (int colId = 0; colId < newTableData[rowId].length; colId++) {
                if (newTableData[rowId][colId] != null) {
                    newTableData[rowId][colId] = newTableData[rowId][colId].replaceAll("null", "");
                }
                if (newTableData[rowId][0] != null && !newTableData[rowId][0].contains("null") && !newTableData[rowId][0].isBlank() && !newTableData[rowId][0].isEmpty()) {
                    cleanData[rowId][colId] = newTableData[rowId][colId];
                }
            }
        }
        return cleanData;
    }

}
